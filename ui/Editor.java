/*
 * FrameMain.java
 *
 * Created on 07 October 2008, 19:02
 */

package ui;

import java.awt.BorderLayout;
import java.awt.Graphics;
import java.awt.Graphics2D;
import java.awt.Image;
import java.awt.Point;
import java.lang.reflect.InvocationTargetException;
import java.util.Enumeration;
import java.util.LinkedList;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.JButton;
import javax.swing.JDialog;
import javax.swing.JInternalFrame;
import javax.swing.JLabel;
import javax.swing.JOptionPane;
import javax.swing.JPanel;
import javax.swing.SwingConstants;
import javax.swing.UIManager;
import javax.swing.tree.DefaultMutableTreeNode;
import javax.swing.tree.DefaultTreeModel;
import javax.swing.tree.TreeModel;
import javax.swing.tree.TreePath;
import ui.command.*;
import ui.error.Error;
import ui.error.ErrorListener;
import netlist.Netlist;
import ui.grid.Pin;
import ui.tools.ImageSelectableComponent;
import ui.tools.SelectableComponent;

/**
 *
 * @author  Matt
 */
public class Editor extends javax.swing.JFrame implements ErrorListener {
    private CircuitPanel circuitPanel;
    private LinkedList<Netlist> netlists = new LinkedList<Netlist>();
    private Image offscreenImage;
    private Graphics offscreenGraphics;
    private boolean drawDirect = false;
    
    /** Creates new form FrameMain */
    public Editor() {        
        initComponents();
        setIconImage(new javax.swing.ImageIcon(this.getClass().getResource("/ui/images/buttons/toolbar/led.png")).getImage());       
    }

    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        Toolbar = new javax.swing.JToolBar();
        NewButton = new javax.swing.JButton();
        OpenFileButton = new javax.swing.JButton();
        SaveButton = new javax.swing.JButton();
        SaveAsButton = new javax.swing.JButton();
        jSeparator3 = new javax.swing.JToolBar.Separator();
        CutButton = new javax.swing.JButton();
        CopyButton = new javax.swing.JButton();
        PasteButton = new javax.swing.JButton();
        DeleteSelection = new javax.swing.JButton();
        ClearCircuit = new javax.swing.JButton();
        UndoButton = new javax.swing.JButton();
        RedoButton = new javax.swing.JButton();
        jSeparator6 = new javax.swing.JToolBar.Separator();
        MakeImageButton = new javax.swing.JButton();
        jSeparator5 = new javax.swing.JToolBar.Separator();
        RecordButton = new javax.swing.JButton();
        StopButton = new javax.swing.JButton();
        PauseButton = new javax.swing.JButton();
        StartButton = new javax.swing.JButton();
        jSlider1 = new javax.swing.JSlider();
        MainScrollPane = new javax.swing.JScrollPane();
        DesktopPane = new ScrollableDesktop();
        Toolbox = new javax.swing.JInternalFrame();
        jPanel4 = new javax.swing.JPanel();
        Selection = new javax.swing.JButton();
        Wire = new javax.swing.JButton();
        InsertSubComponent = new javax.swing.JButton();
        RotateLeft = new javax.swing.JButton();
        RotateRght = new javax.swing.JButton();
        InsertComponent = new javax.swing.JButton();
        jScrollPane1 = new javax.swing.JScrollPane();
        ComponentSelectionTree = new javax.swing.JTree();
        Options = new OptionsPanel(this);
        MenuBar = new javax.swing.JMenuBar();
        File = new javax.swing.JMenu();
        Open = new javax.swing.JMenuItem();
        Save = new javax.swing.JMenuItem();
        SaveAs = new javax.swing.JMenuItem();
        Exit = new javax.swing.JMenuItem();
        Edit = new javax.swing.JMenu();
        Undo = new javax.swing.JMenuItem();
        Redo = new javax.swing.JMenuItem();
        jSeparator1 = new javax.swing.JSeparator();
        Cut = new javax.swing.JMenuItem();
        Copy = new javax.swing.JMenuItem();
        Paste = new javax.swing.JMenuItem();
        SelectAll = new javax.swing.JMenuItem();
        jSeparator2 = new javax.swing.JSeparator();
        Delete = new javax.swing.JMenuItem();
        Simulation = new javax.swing.JMenu();
        Window = new javax.swing.JMenu();
        Help = new javax.swing.JMenu();
        About = new javax.swing.JMenuItem();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        java.util.ResourceBundle bundle = java.util.ResourceBundle.getBundle("ui/Bundle"); // NOI18N
        setTitle(bundle.getString("Editor.title")); // NOI18N
        setBounds(new java.awt.Rectangle(0, 0, 985, 750));
        setCursor(new java.awt.Cursor(java.awt.Cursor.DEFAULT_CURSOR));
        setMinimumSize(new java.awt.Dimension(985, 750));
        getContentPane().setLayout(new javax.swing.BoxLayout(getContentPane(), javax.swing.BoxLayout.PAGE_AXIS));

        Toolbar.setFloatable(false);
        Toolbar.setRollover(true);
        Toolbar.setBorderPainted(false);
        Toolbar.setMaximumSize(new java.awt.Dimension(2000, 34));
        Toolbar.setMinimumSize(new java.awt.Dimension(750, 34));
        Toolbar.setPreferredSize(new java.awt.Dimension(750, 34));

        NewButton.setIcon(new javax.swing.ImageIcon(getClass().getResource("/ui/images/buttons/toolbar/document-new.png"))); // NOI18N
        NewButton.setText(bundle.getString("Editor.NewButton.text")); // NOI18N
        NewButton.setFocusable(false);
        NewButton.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        NewButton.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        NewButton.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                NewButtonMouseClicked(evt);
            }
        });
        Toolbar.add(NewButton);

        OpenFileButton.setIcon(new javax.swing.ImageIcon(getClass().getResource("/ui/images/buttons/toolbar/document-open.png"))); // NOI18N
        OpenFileButton.setText(bundle.getString("Editor.OpenFileButton.text")); // NOI18N
        OpenFileButton.setFocusable(false);
        OpenFileButton.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        OpenFileButton.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        OpenFileButton.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                OpenFileButtonMouseClicked(evt);
            }
        });
        Toolbar.add(OpenFileButton);

        SaveButton.setIcon(new javax.swing.ImageIcon(getClass().getResource("/ui/images/buttons/toolbar/document-save.png"))); // NOI18N
        SaveButton.setText(bundle.getString("Editor.SaveButton.text")); // NOI18N
        SaveButton.setFocusable(false);
        SaveButton.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        SaveButton.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        SaveButton.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                SaveButtonMouseClicked(evt);
            }
        });
        Toolbar.add(SaveButton);

        SaveAsButton.setIcon(new javax.swing.ImageIcon(getClass().getResource("/ui/images/buttons/toolbar/document-save-as.png"))); // NOI18N
        SaveAsButton.setText(bundle.getString("Editor.SaveAsButton.text")); // NOI18N
        SaveAsButton.setFocusable(false);
        SaveAsButton.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        SaveAsButton.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        SaveAsButton.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                SaveAsButtonMouseClicked(evt);
            }
        });
        Toolbar.add(SaveAsButton);
        Toolbar.add(jSeparator3);

        CutButton.setIcon(new javax.swing.ImageIcon(getClass().getResource("/ui/images/buttons/toolbar/edit-cut.png"))); // NOI18N
        CutButton.setText(bundle.getString("Editor.CutButton.text")); // NOI18N
        CutButton.setFocusable(false);
        CutButton.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        CutButton.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        CutButton.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                CutButtonMouseClicked(evt);
            }
        });
        Toolbar.add(CutButton);

        CopyButton.setIcon(new javax.swing.ImageIcon(getClass().getResource("/ui/images/buttons/toolbar/edit-copy.png"))); // NOI18N
        CopyButton.setText(bundle.getString("Editor.CopyButton.text")); // NOI18N
        CopyButton.setFocusable(false);
        CopyButton.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        CopyButton.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        CopyButton.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                CopyButtonMouseClicked(evt);
            }
        });
        Toolbar.add(CopyButton);

        PasteButton.setIcon(new javax.swing.ImageIcon(getClass().getResource("/ui/images/buttons/toolbar/edit-paste.png"))); // NOI18N
        PasteButton.setText(bundle.getString("Editor.PasteButton.text")); // NOI18N
        PasteButton.setFocusable(false);
        PasteButton.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        PasteButton.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        PasteButton.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                PasteButtonMouseClicked(evt);
            }
        });
        Toolbar.add(PasteButton);

        DeleteSelection.setIcon(new javax.swing.ImageIcon(getClass().getResource("/ui/images/buttons/toolbar/edit-delete.png"))); // NOI18N
        DeleteSelection.setText(bundle.getString("Editor.DeleteSelection.text")); // NOI18N
        DeleteSelection.setToolTipText(bundle.getString("Editor.DeleteSelection.toolTipText")); // NOI18N
        DeleteSelection.setFocusable(false);
        DeleteSelection.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        DeleteSelection.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        DeleteSelection.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                DeleteSelectionMouseClicked(evt);
            }
        });
        Toolbar.add(DeleteSelection);

        ClearCircuit.setIcon(new javax.swing.ImageIcon(getClass().getResource("/ui/images/buttons/toolbar/edit-clear.png"))); // NOI18N
        ClearCircuit.setText(bundle.getString("Editor.ClearCircuit.text")); // NOI18N
        ClearCircuit.setToolTipText(bundle.getString("Editor.ClearCircuit.toolTipText")); // NOI18N
        ClearCircuit.setFocusable(false);
        ClearCircuit.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        ClearCircuit.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        ClearCircuit.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                ClearCircuitMouseClicked(evt);
            }
        });
        Toolbar.add(ClearCircuit);

        UndoButton.setIcon(new javax.swing.ImageIcon(getClass().getResource("/ui/images/buttons/toolbar/edit-undo.png"))); // NOI18N
        UndoButton.setText(bundle.getString("Editor.UndoButton.text")); // NOI18N
        UndoButton.setEnabled(false);
        UndoButton.setFocusable(false);
        UndoButton.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        UndoButton.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        UndoButton.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                UndoButtonMouseClicked(evt);
            }
        });
        cmdHist.addUndoEmptyListener(UndoButton);
        Toolbar.add(UndoButton);

        RedoButton.setIcon(new javax.swing.ImageIcon(getClass().getResource("/ui/images/buttons/toolbar/edit-redo.png"))); // NOI18N
        RedoButton.setText(bundle.getString("Editor.RedoButton.text")); // NOI18N
        RedoButton.setEnabled(false);
        RedoButton.setFocusable(false);
        RedoButton.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        RedoButton.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        RedoButton.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                RedoButtonMouseClicked(evt);
            }
        });
        cmdHist.addRedoEmptyListener(RedoButton);
        Toolbar.add(RedoButton);
        Toolbar.add(jSeparator6);

        MakeImageButton.setIcon(new javax.swing.ImageIcon(getClass().getResource("/ui/images/buttons/toolbar/create-image.png"))); // NOI18N
        MakeImageButton.setText(bundle.getString("Editor.MakeImageButton.text")); // NOI18N
        MakeImageButton.setFocusable(false);
        MakeImageButton.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        MakeImageButton.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        MakeImageButton.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                MakeImageButtonMouseClicked(evt);
            }
        });
        Toolbar.add(MakeImageButton);
        Toolbar.add(jSeparator5);

        RecordButton.setIcon(new javax.swing.ImageIcon(getClass().getResource("/ui/images/buttons/toolbar/media-record.png"))); // NOI18N
        RecordButton.setText(bundle.getString("Editor.RecordButton.text")); // NOI18N
        RecordButton.setFocusable(false);
        RecordButton.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        RecordButton.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        RecordButton.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                RecordButtonMouseClicked(evt);
            }
        });
        Toolbar.add(RecordButton);

        StopButton.setIcon(new javax.swing.ImageIcon(getClass().getResource("/ui/images/buttons/toolbar/media-playback-stop.png"))); // NOI18N
        StopButton.setText(bundle.getString("Editor.StopButton.text")); // NOI18N
        StopButton.setFocusable(false);
        StopButton.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        StopButton.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        StopButton.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                StopButtonMouseClicked(evt);
            }
        });
        Toolbar.add(StopButton);

        PauseButton.setIcon(new javax.swing.ImageIcon(getClass().getResource("/ui/images/buttons/toolbar/media-playback-pause.png"))); // NOI18N
        PauseButton.setText(bundle.getString("Editor.PauseButton.text")); // NOI18N
        PauseButton.setFocusable(false);
        PauseButton.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        PauseButton.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        PauseButton.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                PauseButtonMouseClicked(evt);
            }
        });
        Toolbar.add(PauseButton);

        StartButton.setIcon(new javax.swing.ImageIcon(getClass().getResource("/ui/images/buttons/toolbar/media-playback-start.png"))); // NOI18N
        StartButton.setText(bundle.getString("Editor.StartButton.text")); // NOI18N
        StartButton.setFocusable(false);
        StartButton.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        StartButton.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        StartButton.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                StartButtonMouseClicked(evt);
            }
        });
        Toolbar.add(StartButton);

        jSlider1.setMajorTickSpacing(10);
        jSlider1.setPaintLabels(true);
        jSlider1.setPaintTicks(true);
        jSlider1.setSnapToTicks(true);
        jSlider1.setMaximumSize(new java.awt.Dimension(200, 33));
        Toolbar.add(jSlider1);

        getContentPane().add(Toolbar);

        MainScrollPane.setPreferredSize(new java.awt.Dimension(750, 550));

        DesktopPane.setBackground(javax.swing.UIManager.getDefaults().getColor("Panel.background"));
        DesktopPane.setAutoscrolls(true);
        DesktopPane.setMinimumSize(new java.awt.Dimension(600, 400));

        Toolbox.setClosable(true);
        Toolbox.setDefaultCloseOperation(javax.swing.WindowConstants.DO_NOTHING_ON_CLOSE);
        Toolbox.setIconifiable(true);
        Toolbox.setMaximizable(true);
        Toolbox.setResizable(true);
        Toolbox.setTitle(bundle.getString("Editor.Toolbox.title")); // NOI18N
        Toolbox.setFrameIcon(new javax.swing.ImageIcon(getClass().getResource("/ui/images/buttons/toolbar/system-run.png"))); // NOI18N
        Toolbox.setPreferredSize(new java.awt.Dimension(163, 600));
        Toolbox.setVisible(true);
        Toolbox.getContentPane().setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        jPanel4.setLayout(new java.awt.GridLayout(2, 3));

        Selection.setIcon(new javax.swing.ImageIcon(getClass().getResource("/ui/images/buttons/sml_select.png"))); // NOI18N
        Selection.setText(bundle.getString("TestJFrameForm.Selection.text")); // NOI18N
        Selection.setMargin(new java.awt.Insets(2, 2, 2, 2));
        Selection.setMaximumSize(new java.awt.Dimension(26, 28));
        Selection.setMinimumSize(new java.awt.Dimension(26, 28));
        Selection.setPreferredSize(new java.awt.Dimension(26, 28));
        Selection.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                SelectionMouseClicked(evt);
            }
        });
        jPanel4.add(Selection);

        Wire.setIcon(new javax.swing.ImageIcon(getClass().getResource("/ui/images/buttons/sml_wire.png"))); // NOI18N
        Wire.setText(bundle.getString("TestJFrameForm.Wire.text")); // NOI18N
        Wire.setToolTipText(bundle.getString("TestJFrameForm.Wire.toolTipText")); // NOI18N
        Wire.setMargin(new java.awt.Insets(2, 2, 2, 2));
        Wire.setMaximumSize(new java.awt.Dimension(26, 28));
        Wire.setMinimumSize(new java.awt.Dimension(26, 28));
        Wire.setPreferredSize(new java.awt.Dimension(26, 28));
        Wire.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                WireMouseClicked(evt);
            }
        });
        jPanel4.add(Wire);

        InsertSubComponent.setIcon(new javax.swing.ImageIcon(getClass().getResource("/ui/images/buttons/toolbar/insert-link.png"))); // NOI18N
        InsertSubComponent.setText(bundle.getString("Editor.InsertSubComponent.text")); // NOI18N
        InsertSubComponent.setFocusable(false);
        InsertSubComponent.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        InsertSubComponent.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        InsertSubComponent.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                InsertSubComponentMouseClicked(evt);
            }
        });
        jPanel4.add(InsertSubComponent);

        RotateLeft.setIcon(new javax.swing.ImageIcon(getClass().getResource("/ui/images/buttons/toolbar/object-rotate-left.png"))); // NOI18N
        RotateLeft.setText(bundle.getString("Editor.RotateLeft.text")); // NOI18N
        RotateLeft.setFocusable(false);
        RotateLeft.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        RotateLeft.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        RotateLeft.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                RotateLeftMouseClicked(evt);
            }
        });
        jPanel4.add(RotateLeft);

        RotateRght.setIcon(new javax.swing.ImageIcon(getClass().getResource("/ui/images/buttons/toolbar/object-rotate-right.png"))); // NOI18N
        RotateRght.setText(bundle.getString("Editor.RotateRght.text")); // NOI18N
        RotateRght.setFocusable(false);
        RotateRght.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        RotateRght.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        RotateRght.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                RotateRghtMouseClicked(evt);
            }
        });
        jPanel4.add(RotateRght);

        InsertComponent.setIcon(new javax.swing.ImageIcon(getClass().getResource("/ui/images/buttons/toolbar/insert-object.png"))); // NOI18N
        InsertComponent.setText(bundle.getString("Editor.InsertComponent.text")); // NOI18N
        InsertComponent.setFocusable(false);
        InsertComponent.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        InsertComponent.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        InsertComponent.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                InsertComponentMouseClicked(evt);
            }
        });
        jPanel4.add(InsertComponent);

        Toolbox.getContentPane().add(jPanel4, new org.netbeans.lib.awtextra.AbsoluteConstraints(0, 0, 170, 70));

        ComponentSelectionTree.addTreeSelectionListener(new javax.swing.event.TreeSelectionListener() {
            public void valueChanged(javax.swing.event.TreeSelectionEvent evt) {
                ComponentSelectionTreeValueChanged(evt);
            }
        });
        ComponentSelectionTree.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                ComponentSelectionTreeFocusGained(evt);
            }
        });
        ComponentSelectionTree.setModel(getTreeValues());
        ComponentSelectionTree.setRootVisible(false);
        jScrollPane1.setViewportView(ComponentSelectionTree);

        Toolbox.getContentPane().add(jScrollPane1, new org.netbeans.lib.awtextra.AbsoluteConstraints(0, 74, 170, 250));

        org.jdesktop.layout.GroupLayout OptionsLayout = new org.jdesktop.layout.GroupLayout(Options);
        Options.setLayout(OptionsLayout);
        OptionsLayout.setHorizontalGroup(
            OptionsLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(0, 170, Short.MAX_VALUE)
        );
        OptionsLayout.setVerticalGroup(
            OptionsLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(0, 250, Short.MAX_VALUE)
        );

        Toolbox.getContentPane().add(Options, new org.netbeans.lib.awtextra.AbsoluteConstraints(0, 324, 170, 250));

        Toolbox.setBounds(0, 0, 180, 600);
        DesktopPane.add(Toolbox, javax.swing.JLayeredPane.DEFAULT_LAYER);

        MainScrollPane.setViewportView(DesktopPane);

        getContentPane().add(MainScrollPane);

        File.setMnemonic('F');
        File.setText(bundle.getString("TestJFrameForm.jMenu1.text_1")); // NOI18N

        Open.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_O, java.awt.event.InputEvent.CTRL_MASK));
        Open.setMnemonic('o');
        Open.setText(bundle.getString("Editor.Open.text")); // NOI18N
        Open.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                OpenActionPerformed(evt);
            }
        });
        File.add(Open);

        Save.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_S, java.awt.event.InputEvent.CTRL_MASK));
        Save.setMnemonic('s');
        Save.setText(bundle.getString("Editor.Save.text")); // NOI18N
        Save.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                SaveActionPerformed(evt);
            }
        });
        File.add(Save);

        SaveAs.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_S, java.awt.event.InputEvent.SHIFT_MASK | java.awt.event.InputEvent.CTRL_MASK));
        SaveAs.setMnemonic('v');
        SaveAs.setText(bundle.getString("Editor.SaveAs.text")); // NOI18N
        SaveAs.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                SaveAsActionPerformed(evt);
            }
        });
        File.add(SaveAs);

        Exit.setMnemonic('x');
        Exit.setText(bundle.getString("Editor.Exit.text")); // NOI18N
        Exit.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                ExitActionPerformed(evt);
            }
        });
        File.add(Exit);

        MenuBar.add(File);

        Edit.setMnemonic('E');
        Edit.setText(bundle.getString("Editor.Edit.text")); // NOI18N

        Undo.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_Z, java.awt.event.InputEvent.CTRL_MASK));
        Undo.setText(bundle.getString("Editor.Undo.text")); // NOI18N
        Undo.setEnabled(false);
        Undo.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                UndoActionPerformed(evt);
            }
        });
        Edit.add(Undo);
        cmdHist.addUndoEmptyListener(Undo);

        Redo.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_Y, java.awt.event.InputEvent.CTRL_MASK));
        Redo.setText(bundle.getString("Editor.Redo.text")); // NOI18N
        Redo.setEnabled(false);
        Redo.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                RedoActionPerformed(evt);
            }
        });
        cmdHist.addRedoEmptyListener(Redo);
        Edit.add(Redo);
        Edit.add(jSeparator1);

        Cut.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_X, java.awt.event.InputEvent.CTRL_MASK));
        Cut.setText(bundle.getString("Editor.Cut.text")); // NOI18N
        Cut.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                CutActionPerformed(evt);
            }
        });
        Edit.add(Cut);

        Copy.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_C, java.awt.event.InputEvent.CTRL_MASK));
        Copy.setText(bundle.getString("Editor.Copy.text")); // NOI18N
        Copy.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                CopyActionPerformed(evt);
            }
        });
        Edit.add(Copy);

        Paste.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_V, java.awt.event.InputEvent.CTRL_MASK));
        Paste.setText(bundle.getString("Editor.Paste.text")); // NOI18N
        Paste.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                PasteActionPerformed(evt);
            }
        });
        Edit.add(Paste);

        SelectAll.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_A, java.awt.event.InputEvent.CTRL_MASK));
        SelectAll.setText(bundle.getString("Editor.SelectAll.text")); // NOI18N
        SelectAll.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                SelectAllActionPerformed(evt);
            }
        });
        Edit.add(SelectAll);
        Edit.add(jSeparator2);

        Delete.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_DELETE, 0));
        Delete.setText(bundle.getString("Editor.Delete.text")); // NOI18N
        Delete.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                DeleteActionPerformed(evt);
            }
        });
        Edit.add(Delete);

        MenuBar.add(Edit);

        Simulation.setMnemonic('S');
        Simulation.setText(bundle.getString("Editor.Simulation.text")); // NOI18N
        MenuBar.add(Simulation);

        Window.setMnemonic('W');
        Window.setText(bundle.getString("Editor.Window.text")); // NOI18N
        MenuBar.add(Window);

        Help.setMnemonic('H');
        Help.setText(bundle.getString("Editor.Help.text")); // NOI18N

        About.setText(bundle.getString("Editor.About.text")); // NOI18N
        About.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                AboutActionPerformed(evt);
            }
        });
        Help.add(About);

        MenuBar.add(Help);

        setJMenuBar(MenuBar);

        pack();
    }// </editor-fold>//GEN-END:initComponents
   
    
private void SelectionMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_SelectionMouseClicked
    toggleToolboxButton(Selection);
    getActiveCircuit().selectTool("Select");
}//GEN-LAST:event_SelectionMouseClicked

private void WireMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_WireMouseClicked
    toggleToolboxButton(Wire);
    getActiveCircuit().selectTool("Standard.Wire");
    RotateRght.setEnabled(false);
    RotateLeft.setEnabled(false);
}//GEN-LAST:event_WireMouseClicked

private void ComponentSelectionTreeValueChanged(javax.swing.event.TreeSelectionEvent evt) {//GEN-FIRST:event_ComponentSelectionTreeValueChanged
    RotateRght.setEnabled(true);
    RotateLeft.setEnabled(true);
    
    TreePath currentSelection = ComponentSelectionTree.getSelectionPath();
    if(currentSelection != null){
        // Implode from array path to string delimited by periods.
        Object[] nameArray = currentSelection.getPath();
        String componentName = new String();
        for(int i = 0; i<nameArray.length; i++){
            componentName += nameArray[i] + ".";
        }
        componentName = componentName.substring(0, componentName.length() - 1);
        
        if(isValidComponent(componentName)){
            // Set Options panel (Preview, Component Specific Options etc.)
            ((OptionsPanel) Options).setComponentByName(componentName);
            ((OptionsPanel) Options).getLabelTextbox().setText(""); // Assume user wants a different name for a different component
            Options.setVisible(true);
            Options.repaint();

            // Update the circuit
            makeToolSelection(componentName);

            toggleToolboxButton(InsertComponent);

            repaint();
        }
        
        
    }
    
}//GEN-LAST:event_ComponentSelectionTreeValueChanged

private void UndoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_UndoActionPerformed
    cmdHist.undo();
}//GEN-LAST:event_UndoActionPerformed

private void RedoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_RedoActionPerformed
    cmdHist.redo();
}//GEN-LAST:event_RedoActionPerformed

private void CutActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_CutActionPerformed
    cmdHist.doCommand(new SelectionCutCommand());    
}//GEN-LAST:event_CutActionPerformed

private void CopyActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_CopyActionPerformed
    cmdHist.doCommand(new SelectionCopyCommand());
}//GEN-LAST:event_CopyActionPerformed

private void PasteActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_PasteActionPerformed
    cmdHist.doCommand(new SelectionPasteCommand());
}//GEN-LAST:event_PasteActionPerformed

private void SelectAllActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_SelectAllActionPerformed
    getActiveCircuit().selectAllComponents();
}//GEN-LAST:event_SelectAllActionPerformed

private void ExitActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_ExitActionPerformed
    // TODO: check do we want to save?
    System.exit(0);
}//GEN-LAST:event_ExitActionPerformed

private void ClearCircuitMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_ClearCircuitMouseClicked
    cmdHist.doCommand(new ClearCircuitCommand());
}//GEN-LAST:event_ClearCircuitMouseClicked

private void OpenActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_OpenActionPerformed
    cmdHist.doCommand(new FileOpenCommand());
}//GEN-LAST:event_OpenActionPerformed

private void SaveAsActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_SaveAsActionPerformed
    cmdHist.doCommand(new FileSaveAsCommand());
}//GEN-LAST:event_SaveAsActionPerformed

private void UndoButtonMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_UndoButtonMouseClicked
    cmdHist.undo();
}//GEN-LAST:event_UndoButtonMouseClicked

private void RedoButtonMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_RedoButtonMouseClicked
    cmdHist.redo();
}//GEN-LAST:event_RedoButtonMouseClicked

private void RotateLeftMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_RotateLeftMouseClicked
    cmdHist.doCommand(new RotateLeftCommand());
}//GEN-LAST:event_RotateLeftMouseClicked

private void RotateRghtMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_RotateRghtMouseClicked
    cmdHist.doCommand(new RotateRightCommand());
}//GEN-LAST:event_RotateRghtMouseClicked

private void DeleteSelectionMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_DeleteSelectionMouseClicked
    cmdHist.doCommand(new SelectionDeleteCommand());
}//GEN-LAST:event_DeleteSelectionMouseClicked

private void DeleteActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_DeleteActionPerformed
    cmdHist.doCommand(new SelectionDeleteCommand());
}//GEN-LAST:event_DeleteActionPerformed

private void OpenFileButtonMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_OpenFileButtonMouseClicked
    cmdHist.doCommand(new FileOpenCommand());
}//GEN-LAST:event_OpenFileButtonMouseClicked

private void SaveAsButtonMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_SaveAsButtonMouseClicked
    cmdHist.doCommand(new FileSaveAsCommand());
}//GEN-LAST:event_SaveAsButtonMouseClicked

private void SaveButtonMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_SaveButtonMouseClicked
    cmdHist.doCommand(new FileSaveCommand());
}//GEN-LAST:event_SaveButtonMouseClicked

private void SaveActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_SaveActionPerformed
    cmdHist.doCommand(new FileSaveCommand());
}//GEN-LAST:event_SaveActionPerformed

private void AboutActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_AboutActionPerformed
    if (aboutVersionLabel == null) {
            aboutVersionLabel = new JLabel();
            aboutVersionLabel.setText("Version 1.0");
            aboutVersionLabel.setHorizontalAlignment(SwingConstants.CENTER);
    }
    
    if (aboutContentPane == null) {
        aboutContentPane = new JPanel();
        aboutContentPane.setLayout(new BorderLayout());
        aboutContentPane.add(aboutVersionLabel, BorderLayout.CENTER);
    }
    
    if (aboutDialog == null) {
        aboutDialog = new JDialog(Editor.this, true);
        aboutDialog.setTitle("About");
        aboutDialog.setContentPane(aboutContentPane);
    }
    aboutDialog.pack();
    aboutDialog.setVisible(true);
}//GEN-LAST:event_AboutActionPerformed

private void NewButtonMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_NewButtonMouseClicked
    cmdHist.doCommand(new NewCircuitCommand());
}//GEN-LAST:event_NewButtonMouseClicked

private void InsertComponentMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_InsertComponentMouseClicked
    toggleToolboxButton(InsertComponent);
    ComponentSelectionTreeFocusGained(null);
}//GEN-LAST:event_InsertComponentMouseClicked

private void InsertSubComponentMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_InsertSubComponentMouseClicked
    cmdHist.doCommand(new InsertSubcomponentCommand());
}//GEN-LAST:event_InsertSubComponentMouseClicked

private void MakeImageButtonMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_MakeImageButtonMouseClicked
    cmdHist.doCommand(new MakeImageCommand());
}//GEN-LAST:event_MakeImageButtonMouseClicked

private void RecordButtonMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_RecordButtonMouseClicked
    cmdHist.doCommand(new SimulationRecordCommand());
}//GEN-LAST:event_RecordButtonMouseClicked

private void StopButtonMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_StopButtonMouseClicked
    cmdHist.doCommand(new SimulationStopCommand());
}//GEN-LAST:event_StopButtonMouseClicked

private void PauseButtonMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_PauseButtonMouseClicked
    cmdHist.doCommand(new SimulationPauseCommand());
}//GEN-LAST:event_PauseButtonMouseClicked

private void StartButtonMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_StartButtonMouseClicked
    cmdHist.doCommand(new SimulationStartCommand());
}//GEN-LAST:event_StartButtonMouseClicked

private void CutButtonMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_CutButtonMouseClicked
    cmdHist.doCommand(new SelectionCutCommand());
}//GEN-LAST:event_CutButtonMouseClicked

private void PasteButtonMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_PasteButtonMouseClicked
    cmdHist.doCommand(new SelectionPasteCommand());
}//GEN-LAST:event_PasteButtonMouseClicked

private void CopyButtonMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_CopyButtonMouseClicked
    cmdHist.doCommand(new SelectionCopyCommand());
}//GEN-LAST:event_CopyButtonMouseClicked

private void ComponentSelectionTreeFocusGained(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_ComponentSelectionTreeFocusGained
    ((OptionsPanel)Options).setComponentRotation(0);
    ComponentSelectionTreeValueChanged(null);
}//GEN-LAST:event_ComponentSelectionTreeFocusGained

    /** 
     * Repopulate the windows menu in the toolbar with the opened circuits
     */
    public void refreshWindowsMenu() {
        Window.removeAll();
        for(JInternalFrame cf: circuitwindows){
            final JInternalFrame cf2 = cf;
            javax.swing.JMenuItem windowItem = new javax.swing.JMenuItem();
            windowItem.setText(cf.getTitle()); 
            windowItem.addActionListener(new java.awt.event.ActionListener() {
                public void actionPerformed(java.awt.event.ActionEvent evt) {
                    cf2.moveToFront();
                }
            });
            Window.add(windowItem);
            
        }
    }
    
    /** Reset selections of the component toolbox so that we only have one 
     * button depressed at a time.
     * 
     * @param button    The button which is currently being selected
     */
    private void toggleToolboxButton(JButton button){
        // Reset Selections
        Selection.setSelected(false);
        Wire.setSelected(false);
        InsertComponent.setSelected(false);

        // Select this button
        button.setSelected(true);
        
        // Remove floating components
        if(!button.equals(InsertComponent)){
            Options.setVisible(false);
            circuitPanel.removeUnFixedComponents();
        }
    }

    public CircuitPanel getActiveCircuit() {
        return circuitPanel;
    }

    public CircuitPanel newCircuit() {
        CircuitFrame cir = new CircuitFrame(this);
        circuitwindows.add(cir);
        DesktopPane.add(cir, javax.swing.JLayeredPane.DEFAULT_LAYER);
        setActiveCircuit(cir.getCircuitPanel());
        
        // Populate Windows menu
        refreshWindowsMenu();
        
        return circuitPanel;
        
    }

    public void setActiveCircuit(CircuitPanel circuit) {
        circuitPanel = circuit;
        this.setTitle("Logic Circuit Workbench - " + circuitPanel.getFilename());
        circuitPanel.getParentFrame().moveToFront();
              
    }

    /**
     * Construct the component tree from the list of netlists associated with this editor.
     * 
     * @return rootNode     A well-formed TreeModel for use in a JTree
     */
    public TreeModel getTreeValues(){
        
        DefaultMutableTreeNode parent, rootNode = new DefaultMutableTreeNode("Components");
        String[] nodes = null;
        parent = rootNode;
        
        for(Netlist nl: netlists){
            for(String s: nl.keySet()){
                nodes = s.split("\\.");
                parent = rootNode;
                for(int i=0; i<nodes.length; i++){
                    DefaultMutableTreeNode mtn = new DefaultMutableTreeNode(nodes[i]);
                    
                    // This node does not exist, create a new node
                    Enumeration children = parent.children();
                    Boolean exists = false;
                    whileBreak: while(children.hasMoreElements()){
                        DefaultMutableTreeNode next = (DefaultMutableTreeNode) children.nextElement();
                        if(next.getUserObject().equals(mtn.getUserObject())){ // Compare String names of the nodes
                            exists = true;
                            mtn = next;
                            break whileBreak;
                        }
                    }
                    if(!exists){
                        parent.add(mtn);                    
                    }
                        
                    // We already have this node, move to the child
                    parent = mtn;            

                }
                    
            }            
        }

        return new DefaultTreeModel(rootNode);
    }
    
    public void addNetlist(Netlist nl){
        if(!nl.keySet().isEmpty()){
            netlists.add(nl);
        }
        ComponentSelectionTree.setModel(getTreeValues());
    }
    
    public boolean isNetlistComponent(String key){
        //Remove "Components." from begining
        if(key.length() > 11 && key.subSequence(0, 11).equals("Components.")){
            key = key.substring(11); 
        }
        for(Netlist nl: netlists){
            if(nl.containsKey(key)){
                return true;
            }
        }        
        return false;
    }
    
    public boolean isValidComponent(String key){
        //Remove "Components." from begining
        if(key.length() > 11 && key.subSequence(0, 11).equals("Components.")){
            key = key.substring(11); 
        }
        for(Netlist nl: netlists){
            if(nl.containsKey(key)){
                return true;
            }
        }        
        
        for(Netlist nl: netlists){
            if(nl.containsLogicKey(key)){
                return true;
            }
        }    
        return false;
    }
    
    private sim.SimItem simitem;
    public SelectableComponent getDefaultNetlistComponent(String key){
        //Remove "Components." from begining
        if(key.length() > 11 && key.subSequence(0, 11).equals("Components.")){
            key = key.substring(11); 
        }
        
        for(Netlist nl: netlists){
            if(nl.containsLogicKey(key)){
            // Component not found, revert to default component created from Logic Class data
            
                try {
                    simitem = nl.getLogicClass(key).getConstructor(sim.Simulator.class).newInstance(getActiveCircuit().getSimulator());
                    ImageSelectableComponentImpl sc = new ImageSelectableComponentImpl(getActiveCircuit(), new Point(0,0),key);
                    return sc;
                                
                } catch (InstantiationException ex) {
                    Logger.getLogger(OptionsPanel.class.getName()).log(Level.SEVERE, null, ex);
                } catch (IllegalAccessException ex) {
                    Logger.getLogger(OptionsPanel.class.getName()).log(Level.SEVERE, null, ex);
                } catch (IllegalArgumentException ex) {
                    Logger.getLogger(OptionsPanel.class.getName()).log(Level.SEVERE, null, ex);
                } catch (InvocationTargetException ex) {
                    Logger.getLogger(OptionsPanel.class.getName()).log(Level.SEVERE, null, ex);
                } catch (NoSuchMethodException ex) {
                    Logger.getLogger(OptionsPanel.class.getName()).log(Level.SEVERE, null, ex);
                } catch (SecurityException ex) {
                    Logger.getLogger(OptionsPanel.class.getName()).log(Level.SEVERE, null, ex);
                }

            }
        }
        return null;
    }
    
    
    @SuppressWarnings("unchecked")
    public Class<? extends SelectableComponent> getNetlistComponent(String key){
        //Remove "Components." from begining
        if(key.length() > 11 && key.subSequence(0, 11).equals("Components.")){
            key = key.substring(11); 
        }
        for(Netlist nl: netlists){
            if(nl.containsKey(key)){
                return nl.getClass(key);
            }
        }
        
        return null;
    }
    
    /**
     * Get the current selection from the options panel and add the component to the current active circuit
     */
    public void makeToolSelection(String tool){
        if(circuitPanel != null){
            circuitPanel.removeUnFixedComponents();
            circuitPanel.selectTool(tool);
            cmdHist.doCommand(new AddComponentCommand(((OptionsPanel) Options).getSelectableComponent()));
        }
    }
    
    public void makeToolSelection(){
        TreePath currentSelection = ComponentSelectionTree.getSelectionPath();
        if(currentSelection != null){
            Object[] nameArray = currentSelection.getPath();
            String componentName = new String();
            for(int i = 0; i<nameArray.length; i++){
                componentName += nameArray[i] + ".";
            }
            componentName = componentName.substring(0, componentName.length() - 1);

            if(isValidComponent(componentName)){
                makeToolSelection(componentName);
            }     
        }
    }
    
    /**
     * Fix the current component to the circuit
     * 
     * @param endPoint  the point at which to fix the component
     */
    public void fixSelection(SelectableComponent old, Point endPoint) {
        cmdHist.doCommand(new FixComponentCommand(old, endPoint));
    }
    
    public OptionsPanel getOptionsPanel(){
        return (OptionsPanel) Options;
    }
    
    public CommandHistory getCommandHistory() {
        return cmdHist;
    }

    public Graphics getOffscreenGraphics() {
        return offscreenGraphics;
    }
    
    public Image getOffscreenImage() {
        return offscreenImage;
    }
    
    /**
     * Query the result of the fastest place to draw
     * 
     * @return
     */
    public boolean drawDirect() {
        return drawDirect;
    }
        
    /** From: Expert Solutions by Mark Wutka, et. al. (http://www.webbasedprogramming.com/Java-Expert-Solutions/)
     * doAutoDetect performs tries drawing to the screen and to a
     * buffer. Whichever one takes the least time (actually, whichever
     * one it can do the most times within a set time constraint) is
     * the one that is best.
     */
     public void doAutoDetect()
     {
        Graphics g = this.getGraphics();
        
        // Create the off-screen drawing area
        offscreenImage = createImage(getWidth(), getHeight());
        offscreenGraphics = offscreenImage.getGraphics();

          long start;
          long end;

          // Tally the number of times we were able to draw direct and buffered
          int directCount = 0;
          int bufferedCount = 0;

            // Draw in the applet's background color, makes the autodetection invisible.

          g.setColor(getBackground());
          // Mark what time we started
          start = System.currentTimeMillis();
          end = start;

          // Paint patterns directly to the screen, but only for 500 milliseconds
          while ((end-start) < 500) {
               paintDetectDesign(g);
               end = System.currentTimeMillis();
               directCount++;
          }
          g.setColor(getForeground());

          // record the total time spent drawing directly
          long directTime = end - start;

          start = System.currentTimeMillis();
          end = start;

          // Paint patterns to the offscreen graphics, but only for 500 milliseconds
          while ((end-start) < 500) {
               paintDetectDesign(offscreenGraphics);
               end = System.currentTimeMillis();
               bufferedCount++;
          }

          long bufferedTime = end - start;

          // If we were able to draw more times using the buffered graphics,
          // or if the drawing counts are the same, but the total time for
          // the buffering was less, buffering is faster.

          if ((bufferedCount > directCount) ||
               ((bufferedCount == directCount) &&
                (bufferedTime < directTime))) {
               drawDirect = false;
          } else {

          // If we want to draw direct, free the space taken up by the
          // offscreen image and graphics context.
               offscreenImage.flush();
               offscreenImage = null;
               offscreenGraphics = null;
               drawDirect = true;
          }
    }

    /** paintDetectDesign performs some graphical operations to gauge the time
     * it takes to paint either directly or to an offscreen area. It just draws
     * some lines, boxes and ovals a number of times and then returns.
     */
     protected void paintDetectDesign(Graphics g)
     {
          for (int i=0; i < 10; i++) {
               g.drawLine(0, 0, 100, 100);
               g.fillRect(0, 0, 100, 100);
               g.fillOval(0, 0, 100, 100);
          }
     }

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
       // TODO case analysis for non-windows environments
        try {
           UIManager.setLookAndFeel(UIManager.getSystemLookAndFeelClassName());
           //UIManager.setLookAndFeel("com.sun.java.swing.plaf.gtk.GTKLookAndFeel");
           //UIManager.setLookAndFeel("com.sun.java.swing.plaf.windows.WindowsLookAndFeel");
           //UIManager.setLookAndFeel("com.sun.java.swing.plaf.motif.MotifLookAndFeel");
        } 
        catch (Exception e) {
           e.printStackTrace();
        }
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new Editor().setVisible(true);
            }
        });
    }
    
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JMenuItem About;
    private javax.swing.JButton ClearCircuit;
    private javax.swing.JTree ComponentSelectionTree;
    private javax.swing.JMenuItem Copy;
    private javax.swing.JButton CopyButton;
    private javax.swing.JMenuItem Cut;
    private javax.swing.JButton CutButton;
    private javax.swing.JMenuItem Delete;
    private javax.swing.JButton DeleteSelection;
    private javax.swing.JDesktopPane DesktopPane;
    private javax.swing.JMenu Edit;
    private javax.swing.JMenuItem Exit;
    private javax.swing.JMenu File;
    private javax.swing.JMenu Help;
    private javax.swing.JButton InsertComponent;
    private javax.swing.JButton InsertSubComponent;
    private javax.swing.JScrollPane MainScrollPane;
    private javax.swing.JButton MakeImageButton;
    private javax.swing.JMenuBar MenuBar;
    private javax.swing.JButton NewButton;
    private javax.swing.JMenuItem Open;
    private javax.swing.JButton OpenFileButton;
    private javax.swing.JPanel Options;
    private javax.swing.JMenuItem Paste;
    private javax.swing.JButton PasteButton;
    private javax.swing.JButton PauseButton;
    private javax.swing.JButton RecordButton;
    private javax.swing.JMenuItem Redo;
    private javax.swing.JButton RedoButton;
    private javax.swing.JButton RotateLeft;
    private javax.swing.JButton RotateRght;
    private javax.swing.JMenuItem Save;
    private javax.swing.JMenuItem SaveAs;
    private javax.swing.JButton SaveAsButton;
    private javax.swing.JButton SaveButton;
    private javax.swing.JMenuItem SelectAll;
    private javax.swing.JButton Selection;
    private javax.swing.JMenu Simulation;
    private javax.swing.JButton StartButton;
    private javax.swing.JButton StopButton;
    private javax.swing.JToolBar Toolbar;
    private javax.swing.JInternalFrame Toolbox;
    private javax.swing.JMenuItem Undo;
    private javax.swing.JButton UndoButton;
    private javax.swing.JMenu Window;
    private javax.swing.JButton Wire;
    private javax.swing.JPanel jPanel4;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JSeparator jSeparator1;
    private javax.swing.JSeparator jSeparator2;
    private javax.swing.JToolBar.Separator jSeparator3;
    private javax.swing.JToolBar.Separator jSeparator5;
    private javax.swing.JToolBar.Separator jSeparator6;
    private javax.swing.JSlider jSlider1;
    // End of variables declaration//GEN-END:variables

    private javax.swing.JDialog aboutDialog = null;
    private javax.swing.JPanel aboutContentPane = null;
    private javax.swing.JLabel aboutVersionLabel = null;
    
    private CommandHistory cmdHist = new CommandHistory(this);
    private LinkedList<JInternalFrame> circuitwindows = new LinkedList<JInternalFrame>();

    public void reportError(Error error) {
        JOptionPane.showMessageDialog(this,error.getMessage(), error.getTitle(), JOptionPane.ERROR_MESSAGE);
    }

    private class ImageSelectableComponentImpl extends ImageSelectableComponent {
        
        public ImageSelectableComponentImpl(CircuitPanel parent, Point point, String key) {
            super(parent, point);
            this.componentTreeName = key;
        }

        @Override
        protected void setLocalPins() {
 
            int inputPinNo = simitem.getInputs().size();
            int outputPinNo = simitem.getOutputs().size();

            for (int i = 0; i < inputPinNo; i++) {
                Point p = new Point(0, (i + 1) * UIConstants.GRID_DOT_SPACING);
                localPins.add(p);
            }

            for (int i = 0; i < outputPinNo; i++) {
                Point p = new Point(getWidth() + UIConstants.GRID_DOT_SPACING, (i + 1) * UIConstants.GRID_DOT_SPACING);
                localPins.add(p);
            }
        }

        @Override
        public String getName() {
            return simitem.getName();
        }

        @Override
        public int getHeight() {
            return (Math.max(simitem.getInputs().size(), simitem.getOutputs().size()) + 1) * UIConstants.GRID_DOT_SPACING;
        }

        @Override
        public int getWidth() {
            return 50;
        }

        @Override
        protected void setInvalidAreas() {
            // Tight fitting box so that pins, used for hover selection of component and checking invalid areas
            this.invalidArea = new java.awt.Rectangle(getOrigin().x-getCentre().x+10, getOrigin().y-getCentre().y, getWidth()-UIConstants.GRID_DOT_SPACING+1, getHeight()+1);
        }

        @Override
        public Point getCentre() {
            return new Point(30, 30);
        }

        @Override
        public void draw(Graphics2D g) {
           if(hasLabel()){
                g.setColor(UIConstants.LABEL_TEXT_COLOUR);
                g.drawString(getLabel(), getOrigin().x, getOrigin().y-2);
            }
            
            g.rotate(rotation, getOrigin().x + getCentre().x, getOrigin().y + getCentre().y);
            g.translate(getOrigin().x, getOrigin().y);
            g.setColor(UIConstants.CIRCUIT_BACKGROUND_COLOUR);
            g.drawRect(10, 0, getWidth()-UIConstants.GRID_DOT_SPACING, getHeight());
            
            g.setColor(UIConstants.DEFAULT_WIRE_COLOUR);
            g.drawRect(10, 0, getWidth()-UIConstants.GRID_DOT_SPACING, getHeight());
            g.drawString(simitem.getName(), 10, 12);
            
            int inputPinNo = simitem.getInputs().size();
            int outputPinNo = simitem.getOutputs().size();

            for (int i = 0; i < inputPinNo; i++) {
                Point p = new Point(0, (i + 1) * UIConstants.GRID_DOT_SPACING);
                g.fillOval(p.x-3, p.y-3, 5, 5);
                g.drawOval(p.x-3, p.y-3, 5, 5);
                g.drawLine(p.x, p.y, p.x+UIConstants.GRID_DOT_SPACING, p.y);
            }

            for (int i = 0; i < outputPinNo; i++) {
                Point p = new Point(getWidth() + UIConstants.GRID_DOT_SPACING, (i + 1) * UIConstants.GRID_DOT_SPACING);
                g.fillOval(p.x-3, p.y-3, 5, 5);
                g.drawOval(p.x-3, p.y-3, 5, 5);
                g.drawLine(p.x, p.y, p.x-UIConstants.GRID_DOT_SPACING, p.y);
            }

            g.translate(-getOrigin().x, -getOrigin().y);
            g.rotate(-rotation, getOrigin().x + getCentre().x, getOrigin().y + getCentre().y);
        }

        @Override
        protected void setNetlist() {}

        @Override
        protected void setComponentTreeName() {}

        @Override
        protected void setDefaultImage() {
            defaultBi = null;
        }

        @Override
        protected void setSelectedImage() {
            selectedBi = null;
        }

        @Override
        protected void setActiveImage() {
            activeBi = null;
        }
    }
    
}